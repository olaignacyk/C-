1. Napisz program modelujÄcy problem producent-konsument. Program ma uruchomiÄ n wÄtkĂłw generujÄcych dane oraz m wÄtkĂłw pobierajÄcych dane. KaĹźdy z wÄtkĂłw ma  przechowywaÄ informacjÄ o swoim numerze porzÄdkowym, zaĹĂłĹźmy, Ĺźe sÄ numerowane od 0..n-1 i odpowiednio od 0..m-1. Generowanie i odpowiednio odczytywanie danych przez kaĹźdy wÄtek ma odbywaÄ siÄ w losowych przedziaĹach czasu, ktĂłre bÄdÄ podawane jako parametr dla danego wÄtku. Generowane dane majÄ byÄ umieszczane na liĹcie (lub innej strukturze), zaĹĂłĹźmy, Ĺźe dane to obiekty klasy,  ktĂłre bÄdÄ miaĹy identyfikator informujÄcy o numerze porzÄdkowym wÄtku, ktĂłry je wygenerowaĹ. WÄtek pobierajÄcy dane pobiera i usuwa zawsze pierwszy element ze struktury danych   i "zapamiÄtuje", jaki byĹ identyfikator wÄtku producenta, ktĂłry te dane tam umieĹciĹ. Program ma zatrzymywaÄ wszystkie wÄtki jeĹli wciĹniemy klawisz q i koĹczyÄ swoje dziaĹanie. KaĹźdy zatrzymywany wÄtek ma wypisaÄ ile "skonsumowaĹ" danych od poszczegĂłlnych producentĂłw,
np. Producent 0 - 4, Producent 1 - 5 itd.

2.  Napisz program, ktĂłry bÄdzie monitorowaĹ w czasie rzeczywistym zmiany zachodzÄce w wybranym katalogu polegajÄce na usuwaniu lub dodawaniu do niego plikĂłw (nie trzeba monitorowaÄ podkatalogĂłw). JeĹźeli w katalogu pojawi siÄ nowy plik program ma wypisaÄ: "dodano plik [nazwa pliku]" a jeĹli usuniÄto plik "usuniÄto plik [nazwa pliku]". Program ma siÄ zatrzymywaÄ po wciĹniÄciu litery "q". Monitorowanie ma byÄ w innym wÄtku niĹź oczekiwanie na wciĹniÄcie klawisza! 

3.  Napisz program, ktĂłry poczÄwszy od zadanego katalogu bÄdzie wyszukiwaĹ pliki, ktĂłrych nazwa bÄdzie posiadaĹa zadany napis (podnapis, np. makaron.txt posiada "ron"). Wyszukiwanie ma braÄ pod uwagÄ podkatalogi. Wyszukiwanie ma odbywaÄ siÄ w wÄtku. Kiedy wÄtek wyszukujÄcy znajdzie plik pasujÄcy do wzorca wÄtek gĹĂłwny ma wypisaÄ nazwÄ tego pliku do konsoli (wÄtek wyszukujÄcy ma nie zajmowaÄ siÄ bezpoĹrednio wypisywaniem znalezionych plikĂłw do konsoli). 

4.  Napisz program, ktĂłry uruchomi n wÄtkĂłw i poczeka, aĹź wszystkie z tych wÄtkĂłw zacznÄ siÄ wykonywaÄ. Uruchomienie Thread.Start() nie jest rĂłwnoznaczne z tym, Ĺźe dany wÄtek zaczÄĹ siÄ juĹź wykonywaÄ. Uznajmy, Ĺźe wykonanie zaczyna siÄ wtedy, kiedy wÄtek wykonaĹ co najmniej jednÄ instrukcje w swoim kodzie. Kiedy wszystkie wÄtki zostanÄ uruchomione gĹĂłwny wÄtek ma o tym poinformowaÄ (wypisaÄ informacjÄ do konsoli) a nastÄpnie zainicjowaÄ zamkniÄcie wszystkich wÄtkĂłw. Po otrzymaniu informacji, Ĺźe wszystkie wÄtki zostanÄ zamkniÄte, gĹĂłwny program ma o tym poinformowaÄ oraz sam zakoĹczyÄ dziaĹanie. 
